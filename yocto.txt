Please remind soft/hard variable assignment

add
S = ${WORKDIR}/git

List of variables (bindir, ...) can be found in conf/bitbake.conf

git default branch = master, when yocto fetch git source.
specify it by
SRC_URI = "git://<repo.git>;branch=branchname;protocol=https"
#latest revision
SRCRCV = "${AUTOREV}

# Fetch from local repository
SRC_URI = "git://<git-localpath>;protocol=file"

# Fetch from private repo
SRC_URI = "git://git@github.com/your_repo.git;protocol=ssh"
To use SSH, you must generate an SSH keypair on your computer and add the public key to your GitHub account

# Fetch by tag, don't use SRCREV
SRC_URI = "git://<repo.git>;branch=branchname;protocol=https;tag=rev-1.0"

# Patch source
SRC_URI = "git...  \
      file://0001-mypatch.patch \
"

# Create a patch 
=> After git commit
git show HEAD > my-patch.patch
git format-patch -1

# Force compiling recipe
bitbake -c compile <recipe> -f

#PACKAGE & FILES
#defined in conf/bitbake.conf
# Common default PACKAGE is *-dbg *-dev *-doc *-src *-staticdev *-locale and * | "*" is recipe
# FILE-${PN}-*
package-split
> bitbake -e * | grep ^FILE_*-...= 
FILES_* => files these location will be in * package
FILES_*-debug = files these location will be in *-debug package
FILES_*-src = files these location will be in *-src package
FILES_*-staticdev = files these location will be in *-staticdev package
FILES_*-locale = files these location will be in *-locale package
# If 2 or more packages contains same files, only left-most package will contain the file *** <= udemy lesson got it wrong?
# To check left-most package use command: bitbake -e ${PACKAGE} |  grep ^PACKAGES=        *** <= udemy lesson got it wrong?
# Can modify ${PN}-*,PACKAGES in .bb

# STATIC/DYNAMIC library
#STATIC
${CC} -c *.c
${AR} rcs lib.a *.o

# when create a library package, ${PN} is empty but still required, we can bypass this by
ALLOW_EMPTY_${PN}-* = 1

#DYNAMIC
${CC} -fPIC -c *.o
${CC} -shared -Wl -soname,lib.so.1 -o lib.so.1.0 *.o
#DYNAMIC lib name
# Create symbolic link .so* -> .so 

# Yocto Dependancy
DEPENDS => Build-time depends (build with .so, .a)
RDEPENDS => Run-time depends (call other app)
#depends on a specific version
DEPENDS = "recipe-b (>=1.2)"
RDEPENDS_${PN} = "recipe-b (>=1.2)"

# Show dependency infomations
>bitbake -g recipename
#above command will generate pn-buildlist => list of recipes/targets involved in building recipename
#above command will generate task-depends.dot => graph show dependencies b/w tasks (using dot tool Graphviz)
##>dot -Tpdf task-depends.dot -o outfile.pdf
##>bitbake -g -u taskexp recipename

# noexec
#This is to not doing specific task
do_configure[noexec] = "1"
do_compile[noexec] = "1"

# Autotools
# Way to use build software in multiplatform
#AC_INIT(package, version, bug-report, tarname, url)
#AM_INIT_AUTOMAKE
#AC_OUTPUT
Basic configure.ac file
AC_INIT([myhello], [1.0], [phamanhduc11@gmail.com])
AM_INIT_AUTOMAKE
AC_OUTPUT
AC_PROG_CC                  <= cause the configure script to search for a C compiler
AC_CONFIG_FILES([
Makefile
])

# Command to generate configure files
aclocal - generate m4 environments for autotools
autoconf - generate configure script

autoreconf --install => rerun all command sequencially

# Makefile.am contains
bin_PROGRAMS = hello-world
hello-world_SOURCES = hello.c

# Autotools recipe hello_2.12.bb
SUMMARY = "GNU Helloworld"
LICENSE = "GPLv3+"
# md5sum COPYING file in tarball extracted folder
LIC_FILES_CHKSUM = "file://COPYING;md5=" 

SRC_URI = "${GNU_MIRROR}/hello/hello-${PV}.tar.gz"

inherit autotools gettext
# Incase of out of tree build ${B} != ${S}
inherit autotools-brokensep
# Recipe end

EXTRA_OECONF += "--enable-something"
=> ./configure --enable-something
